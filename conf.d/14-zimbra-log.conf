filter {
  if [type] == "zimbra-mailbox" {
    grok {
      patterns_dir => "/opt/logstash/patterns"
      match => { "message" => "%{ZIMBRA_MAILBOX_LOG}" }
      add_tag => ["zimbra_mailbox"]
    }
    date {
       match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  if [zimbra_account] {
      kv {
        source => "zimbra_account"
        include_keys => [ "ip", "oip", "id", "name", "aid", "aname", "cid", "mid", "ua", "via", "msgid", "item", "ds", "port" ]
        field_split => ";"
        prefix => "zimbra_account_"
        remove_field => [ "zimbra_account" ]
      }
      mutate {
        convert => {
          "zimbra_account_id" => "integer"
          "zimbra_account_aid" => "integer"
          "zimbra_account_cid" => "integer"
          "zimbra_account_mid" => "integer"
          "zimbra_account_port" => "integer"
        }
      }
    }
  if [zimbra_account_ip] {
      geoip {
        database => "/opt/logstash/geoip/GeoIPASNum.dat"
        source => "zimbra_account_ip"
        target => "zimbra_bgp"
      }
      geoip {
        database => "/opt/logstash/geoip/GeoLiteCity.dat"
        source => "zimbra_account_ip"
        target => "zimbra_geoip"
      }
      mutate {
        add_field => { "zimbra_account_hostname" => "%{zimbra_account_ip}" }
      }
      dns {
        reverse => [ "zimbra_account_hostname" ]
        action => "replace"
      }
    }
  if [zimbra_account_oip] {
      geoip {
        database => "/opt/logstash/geoip/GeoIPASNum.dat"
        source => "zimbra_account_oip"
        target => "zimbra_origin_bgp"
      }
      geoip {
        database => "/opt/logstash/geoip/GeoLiteCity.dat"
        source => "zimbra_account_oip"
        target => "zimbra_origin_geoip"
      }
       mutate {
        add_field => { "zimbra_account_origin_hostname" => "%{zimbra_account_oip}" }
      }
      dns {
        reverse => [ "zimbra_account_origin_hostname" ]
        action => "replace"
      }
    }
  if [zimbra_trace_log] {
      mutate {
        add_field => { "zimbra_component" => "JAVA-Exception" }
      }
    }
  }

  
  if [type] == "zimbra-log" {
    grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
          add_tag => ["zimbra_log"]
          add_field => [ "received_at", "%{@timestamp}" ]
          add_field => [ "received_from", "%{host}" ]
        }
    syslog_pri { }
        date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
    
  if [syslog_program] == "amavis" {
      grok {
        patterns_dir => "/oppt/logstash/patterns"
        match => { "syslog_message" => "%{AMAVIS}" }
        add_tag => ["amavis"]
      }
      mutate {
        replace => { "type" => "amavis" }
      }
      if [amavis_relay_ip] {
        geoip {
          database => "/opt/logstash/geoip/GeoIPASNum.dat"
          source => "amavis_relay_ip"
          target => "amavis_bgp"
        }
        geoip {
          database => "/opt/logstash/geoip/GeoLiteCity.dat"
          source => "amavis_relay_ip"
          target => "amavis_geoip"
        }
        mutate {
          add_field => { "amavis_relay_hostname" => "%{amavis_relay_ip}" }
        }
        dns {
          reverse => [ "amavis_relay_hostname" ]
          action => "replace"
        }
      }
    } else if [syslog_program] == "clamd" {
      mutate {
        replace => { "type" => "clamd" }
      }
    } else if [syslog_program] == "opendkim" {
      mutate {
        replace => { "type" => "opendkim" }
      }
    } else {
      drop {
      }
    }
  }
}
